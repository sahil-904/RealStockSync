# -*- coding: utf-8 -*-
"""Stock5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RxfZz29LJQHfg3dtamXj91chL3ASvrYt
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split
import lightgbm as lgb

# Step 1: Download data
stock_symbol = "GAIL.NS"
start_date = "2010-01-01"
end_date = "2025-04-01"
df = yf.download(stock_symbol, start=start_date, end=end_date)
df = df[['Open', 'High', 'Low', 'Close', 'Volume']].dropna()

# Step 2: Feature Engineering
df['Return'] = df['Close'].pct_change()
df['Volatility'] = df['Return'].rolling(window=5).std()
df['MA_10'] = df['Close'].rolling(window=10).mean()
df['MA_50'] = df['Close'].rolling(window=50).mean()
df = df.dropna()

# Step 3: Create features and target
features = ['Open', 'High', 'Low', 'Volume', 'Return', 'Volatility', 'MA_10', 'MA_50']
X = df[features]
y = df['Close']

# Step 4: Scale features
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Step 5: Train-test split
split_date = "2025-03-01"
X_train = X[df.index < split_date]
X_test = X[df.index >= split_date]
y_train = y[df.index < split_date]
y_test = y[df.index >= split_date]

# Re-apply scaler after split to avoid data leakage
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 6: Train LightGBM model
model = lgb.LGBMRegressor(n_estimators=500, learning_rate=0.05)
model.fit(X_train_scaled, y_train)

# Step 7: Predict
y_pred = model.predict(X_test_scaled)

# Step 8: Results
dates_test = df[df.index >= split_date].index
df_results = pd.DataFrame({
    'Date': dates_test,
    'Actual Price': y_test.values.flatten(),
    'Predicted Price': y_pred.flatten()
})
print(df_results.to_string(index=False))

# Step 9: Plot
plt.figure(figsize=(14, 6))
plt.plot(dates_test, y_test.values, label='Actual', marker='o')
plt.plot(dates_test, y_pred, label='Predicted', marker='x', linestyle='--')
plt.xlabel('Date')
plt.ylabel('Stock Price')
plt.title(f'{stock_symbol} - Predicted vs Actual (LightGBM)')
plt.legend()
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# Step 10: Evaluation
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nEvaluation Metrics:")
print(f"RMSE: {rmse:.4f}")
print(f"MAE: {mae:.4f}")
print(f"RÂ² Score: {r2:.4f}")